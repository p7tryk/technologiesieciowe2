#+LANGUAGE: pl
#+LATEX_HEADER: \renewcommand*{\contentsname}{Spis Treści}
#+OPTIONS: toc:2
#+TITLE: Wyszukiwanie ścieżki datagramu w internecie \\
#+TITLE: Patryk Kaniewski
#+AUTHOR: Patryk Kaniewski
#+LATEX_HEADER: \usepackage[margin=3cm]{geometry}
#+latex_header: \hypersetup{colorlinks=true,linkcolor=blue}
#+begin_src emacs-lisp :exports results :results none :eval export
  (make-variable-buffer-local 'org-latex-title-command)
  (setq org-latex-title-command (concat
"\\begin{titlepage}\n"
"\\begin{center}\n"
"{\\Huge Wyszukiwanie ścieżki datagramu w internecie \\par}\n"
"\\vspace{2cm}\n"
"{\\Large Patryk Kaniewski \\par\n}"
"\\vspace{2cm}\n"
"{\\large 2021-01-06 }\n"
"\\end{center}\n"
"\\end{titlepage}\n"))
#+end_src

#+LATEX_HEADER: \usepackage{fancyhdr}
#+LATEX_HEADER: \usepackage[yyyymmdd]{datetime}
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \graphicspath{ {/home/thisconnect/pwsz/} }
#+LATEX_HEADER: \pagestyle{fancyplain}
#+LATEX_HEADER: \chead{Wyszukiwanie ścieżki datagramu w internecie}
#+LATEX_HEADER: \lhead{\includegraphics{pusb.png}}
#+LATEX_HEADER: \rhead{}
#+LATEX_HEADER: \cfoot{}
#+LATEX_HEADER: \lfoot{}
#+LATEX_HEADER: \rfoot{Patryk Kaniewski \linebreak GNU GPLv3}


* Grupa wykonująca zadanie
+ Patryk Kaniewski

* Wstęp
** Cel ćwiczenia
Wyszukanie ścieżki datagramów w internecie
** Schemat ćwiczenia
[[./schemat.png]]
** Wymagany sprzęt
+ Komputer z systemem POSIX

** Plan ćwiczenia
*** Część 1:
1. Wyszukujemy cel
2. Rejestrujemy ruch ICMP
3. Znajdujemy droge
*** Część 2:
1. Rejestracja ruchu ICMP i DNS
2. Znajdujemy DNS i reverse DNS
*** Część 3:
1. Znajdujemy droge do dalekiego celu
2. Czekamy
3. Znajdujemy droge do dalekiego celu
4. Porownujemy drogi


* Ćwiczenie
** Przed ćwiczeniem
*** Konfiguracja wstępna
ip a show dev enp4s0
#+begin_src
2: enp4s0: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc fq_codel state UP group default qlen 1000
    link/ether b4:2e:99:e4:68:04 brd ff:ff:ff:ff:ff:ff
    inet 192.168.0.186/24 brd 192.168.0.255 scope global dynamic noprefixroute enp4s0
       valid_lft 32301sec preferred_lft 32301sec
#+end_src

Wybieramy cel (w moim przypadku skierniewice.eu)
** Część 1
*** Szukanie celu
Wykonujemy ping do wybranego przez nas celu (w moim przypadku skierniewice.eu)
#+begin_src
PING skierniewice.eu (94.152.194.219) 56(84) bytes of data.
64 bytes from 10.ires.pl (94.152.194.219): icmp_seq=1 ttl=55 time=6.41 ms
64 bytes from 10.ires.pl (94.152.194.219): icmp_seq=2 ttl=55 time=6.49 ms
64 bytes from 10.ires.pl (94.152.194.219): icmp_seq=3 ttl=55 time=6.43 ms
64 bytes from 10.ires.pl (94.152.194.219): icmp_seq=4 ttl=55 time=6.31 ms

--- skierniewice.eu ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3003ms
rtt min/avg/max/mdev = 6.310/6.412/6.492/0.065 ms

#+end_src
*** Rejestracja ruchu ICMP
Następnie używamy otrzymanego adresu IP do polecenia ~traceroute -n -I 94.152.194.219~ (opcja -n wyłącza odwracanie adresów ip na adresy domenowe; opcja -I wymusza używanie icmp echo do badania celow).


Rejestrujemy sesje za pomoca programu do przechwytywania pakietów np. wireshark i filtrujemy ICMP.
[[./part1/options.png]]

#+begin_src
traceroute to skierniewice.eu (94.152.194.219), 30 hops max, 60 byte packets
 1  192.168.0.1  0.223 ms  0.318 ms  0.473 ms
 2  91.214.0.129  1.167 ms  1.184 ms  1.200 ms
 3  * * *
 4  94.246.185.48  1.913 ms  1.960 ms  1.986 ms
 5  195.149.232.222  2.379 ms  2.431 ms  2.451 ms
 6  185.80.215.238  6.902 ms  6.804 ms  6.823 ms
 7  94.152.201.242  27.428 ms  26.699 ms  26.697 ms
 8  94.152.201.222  22.125 ms  21.498 ms  21.478 ms
 9  94.152.201.155  7.770 ms  7.394 ms  7.273 ms
10  94.152.194.219  6.205 ms  6.176 ms  6.286 ms
#+end_src
*** Wyniki
[[./part1/traceroute.png]]
+ Na różowo zaznaczone są Echo Requst
+ Na czarno zaznaczone sa TTL exceeded
+ Na niebiesko zaznaczone sa Echo Reply

Nasza scieżka wyglada następująco:
[[./part1/part1.png]]

** Część 2
*** Rejestracja ICMP i DNS
W częsci drugie nieco zmieniamy nasze polecenie ~traceroute -I skierniewice.eu~ (opcja -I wymusza używanie icmp echo do badania celow).

Bez opcji -d, traceroute bedzie probował znaleść poprzez reverse DNS lookup adresy domenowe zwiazane z adresami ip.

Zmieniamy również opcje przechwytywania w programie przechwytywania pakietów (np. wireshark) na host K1.
[[./part2/options.png]]
#+begin_src
traceroute to skierniewice.eu (94.152.194.219), 30 hops max, 60 byte packets
 1  _gateway (192.168.0.1)  0.247 ms  0.313 ms  0.481 ms
 2  91-214-0-129.timplus.net (91.214.0.129)  1.387 ms  1.379 ms  1.415 ms
 3  main-gw.timplus.net (91.214.0.1)  1.469 ms  1.490 ms  1.505 ms
 4  48.polmix2.epix.net.pl (94.246.185.48)  2.370 ms  2.397 ms  2.389 ms
 5  oxylion.tpix.pl (195.149.232.222)  2.654 ms  2.714 ms  2.739 ms
 6  185.80.215.238 (185.80.215.238)  7.172 ms  6.814 ms  6.805 ms
 7  5E98C9F2.static.tld.pl (94.152.201.242)  23.860 ms  21.250 ms  21.252 ms
 8  5E98C9DE.static.tld.pl (94.152.201.222)  25.080 ms  25.089 ms  25.100 ms
 9  5E98C99B.static.tld.pl (94.152.201.155)  14.678 ms  14.714 ms  14.730 ms
10  10.ires.pl (94.152.194.219)  6.568 ms  6.598 ms  6.619 ms
#+end_src
*** Wyniki
Aby ułatwić analizę packetdump możemy uzyć w wireshark display filter ~icmp or dns~.
[[./part2/dnsA.png]]
Pierwsze nasze zapytanie DNS jest typu A(AAA), aby przekonwertować nazwe domeny który przekazalismy traceroute (skierniewice.eu) na adres IPv4.
[[./part2/dnsPTR1.png]]
Każde kolejne zapytanie bedzie typu PTR, aby przekonwertować adres IP na nazwe domeny. Warto zwrócić uwage na to że adres IP który został wysłany w zapytaniu PTR mial oktety odwrócone i ~.in-addr.arpa~ dodane na końcu.
[[./part2/dnsPTR2.png]]
Dokładnie tak samo wygląda zapytanie na ostateczny adres na który jest związany z domeną która testowaliśmy.
Ciekawym spostrzeżeniem może być że zapytanie PTR na ten sam adres który dostaliśmy z zapytania A ~skierniewice.eu~ ma inna nazwe domeny (~10.ires.pl~).

Można to zweryfikować za pomocą innych narzędzi (np. linux ~dig~ i ~dig -x~).
#+begin_src
;; QUESTION SECTION:
;skierniewice.eu.               IN      A

;; ANSWER SECTION:
skierniewice.eu.        3599    IN      A      
#+end_src
#+begin_src 
;; QUESTION SECTION:
;219.194.152.94.in-addr.arpa.   IN      PTR

;; ANSWER SECTION:
219.194.152.94.in-addr.arpa. 3600 IN    PTR     10.ires.pl.
#+end_src
** Część 3
*** Odległy cel
Znalezienie odległego celu w dzisiejszych czasach może okazać sie problemem ze wzgledu na powszechność usług takich jak cloudflare, aws oferujacych wszelakie usługi proxy/cache.

Wybralem cel ~theindependent.sg~ znajdujący sie w azji południowo-wschodniej:
#+begin_src 
PING theindependent.sg (34.87.85.150) 56(84) bytes of data.
64 bytes from 150.85.87.34.bc.googleusercontent.com (34.87.85.150): icmp_seq=1 ttl=60 time=265 ms
64 bytes from 150.85.87.34.bc.googleusercontent.com (34.87.85.150): icmp_seq=2 ttl=60 time=266 ms
64 bytes from 150.85.87.34.bc.googleusercontent.com (34.87.85.150): icmp_seq=3 ttl=60 time=265 ms
64 bytes from 150.85.87.34.bc.googleusercontent.com (34.87.85.150): icmp_seq=4 ttl=60 time=265 ms

--- theindependent.sg ping statistics ---
4 packets transmitted, 4 received, 0% packet loss, time 3003ms
rtt min/avg/max/mdev = 265.312/265.624/266.329/0.410 ms
#+end_src

Traceroute o godzinie 18:01
#+begin_src 
traceroute to theindependent.sg (34.87.85.150), 30 hops max, 60 byte packets
 1  192.168.0.1  0.249 ms  0.352 ms  0.453 ms
 2  91.214.0.129  1.140 ms  1.146 ms  1.155 ms
 3  * * *
 4  94.246.185.48  1.893 ms  1.928 ms  2.005 ms
 5  195.149.233.101  2.436 ms  2.482 ms  2.673 ms
 6  188.47.253.245  2.565 ms  2.620 ms  2.547 ms
 7  * * *
 8  108.170.248.178  265.680 ms  265.580 ms  265.623 ms
 9  108.170.225.145  262.537 ms * *
10  209.85.243.180  263.452 ms  263.414 ms  263.415 ms
11  108.170.233.49  266.235 ms  265.706 ms  265.734 ms
12  * * *
13  * * *
14  * * *
15  * * *
16  * * *
17  * * *
18  * * *
19  * * *
20  * * *
21  34.87.85.150  265.372 ms  265.358 ms  265.202 ms
#+end_src

*** Ponowienie szukania drogi
Traceroute o godzinie 18:31
#+begin_src 

#+end_src
*** Różnice w drodze
Aby porownać różnice odrzuciłem pingi z traceroute za pomoca polecenia ~awk '{print $1 "\t" $2}' traceroute1.txt > trace1.txt~ a następnie polecenia ~diff~ aby porównać te pliki


* Wnioski
** Routing
** Napotkane problemy
*** traceroute -I
traceroute na systemie na ktorym przeprowadzane jest ćwiczenie (Archlinux) domyślnie nie używa ICMP echo (ping) do przeszukiwania drogi ze wzgledu na to że w dużej ilości sieci pakiety ICMP sa filtrowane
[[./problemy/problem1.png]]

Rozwiązaniem tego było wyszukanie w manpage (~man traceroute~) o traceroute opcji -I która zmusza program do używania ICMP ping
[[./problemy/rozwiazanie1.png]]
